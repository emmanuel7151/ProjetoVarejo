// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ProjetoVarejo.Models.Data;
using System;

namespace ProjetoVarejo.Migrations
{
    [DbContext(typeof(VarejoContext))]
    [Migration("20180623083808_ModificacaoVendedor")]
    partial class ModificacaoVendedor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjetoVarejo.Models.Cliente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acessibilidade");

                    b.Property<string>("Bairro");

                    b.Property<string>("CPF");

                    b.Property<string>("Celular");

                    b.Property<string>("Cidade");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Endereco");

                    b.Property<string>("Facebook");

                    b.Property<string>("Instagran");

                    b.Property<string>("Nome");

                    b.Property<bool>("Promoção");

                    b.Property<string>("Telefone");

                    b.Property<string>("Uf");

                    b.HasKey("ID");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("ProjetoVarejo.Models.Estoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataEntrada");

                    b.Property<int>("ProdutoID");

                    b.Property<int>("Quantidade");

                    b.Property<double>("ValorUnitario");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoID");

                    b.ToTable("Estoque");
                });

            modelBuilder.Entity("ProjetoVarejo.Models.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClienteId");

                    b.Property<string>("CupomDeDesconto");

                    b.Property<DateTime>("DataCompra");

                    b.Property<DateTime>("DataPagamento");

                    b.Property<DateTime>("DataVencimento");

                    b.Property<double>("Desconto");

                    b.Property<int>("DiasAtraso");

                    b.Property<string>("MetodoDePagamento");

                    b.Property<bool>("Status");

                    b.Property<double>("TaxaDeJuros");

                    b.Property<double>("ValorCompra");

                    b.Property<double>("ValorTotal");

                    b.Property<int>("VendedorId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("ProjetoVarejo.Models.PedidoProduto", b =>
                {
                    b.Property<int>("PedidoId");

                    b.Property<int>("ProdutoId");

                    b.HasKey("PedidoId", "ProdutoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("PedidoProduto");
                });

            modelBuilder.Entity("ProjetoVarejo.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Especificação");

                    b.Property<string>("Marca");

                    b.Property<string>("Modelo");

                    b.Property<string>("PosicaoEstoque");

                    b.Property<double>("PrecoCusto");

                    b.Property<double>("PrecoVenda");

                    b.Property<string>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("ProjetoVarejo.Models.Vendedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro");

                    b.Property<string>("CPF");

                    b.Property<string>("Celular");

                    b.Property<string>("Cidade");

                    b.Property<double>("Comissao");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Endereco");

                    b.Property<string>("Nome");

                    b.Property<string>("Telefone");

                    b.Property<string>("Uf");

                    b.HasKey("Id");

                    b.ToTable("Vendedor");
                });

            modelBuilder.Entity("ProjetoVarejo.Models.Estoque", b =>
                {
                    b.HasOne("ProjetoVarejo.Models.Produto", "Produto")
                        .WithMany("Estoque")
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoVarejo.Models.Pedido", b =>
                {
                    b.HasOne("ProjetoVarejo.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjetoVarejo.Models.Vendedor", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoVarejo.Models.PedidoProduto", b =>
                {
                    b.HasOne("ProjetoVarejo.Models.Pedido", "Pedido")
                        .WithMany("PedidoProduto")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjetoVarejo.Models.Produto", "Produto")
                        .WithMany("PedidoProduto")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
